// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// auditor.kubeshield.to_dashboards.v1.yaml
// auditor.kubeshield.to_dashboards.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _auditorKubeshieldTo_dashboardsV1Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x4f\x8f\x2b\x39\x11\xbf\xcf\xa7\x28\x0d\x87\x07\x52\xd2\xd1\x03\x84\x20\xb7\xd1\x83\x5d\x8d\xd8\x5d\x56\x6f\x66\xf7\x82\x38\x54\xdb\x95\xb4\x19\xb7\xdd\xb8\xdc\x33\x2f\x20\xbe\x3b\x2a\xbb\xff\x25\xe9\x4e\xc2\xc0\x4a\xeb\x5b\xda\x76\xb9\xfe\xfc\xea\x57\x65\x07\x1b\xf3\x23\x05\x36\xde\x6d\x01\x1b\x43\x5f\x22\x39\xf9\xc5\xc5\xcb\xef\xb9\x30\x7e\xf3\xfa\xf1\xee\xc5\x38\xbd\x85\x4f\x2d\x47\x5f\x7f\x26\xf6\x6d\x50\xf4\x47\xda\x19\x67\xa2\xf1\xee\xae\xa6\x88\x1a\x23\x6e\xef\x00\x54\x20\x94\x8f\xcf\xa6\x26\x8e\x58\x37\x5b\x70\xad\xb5\x77\x00\x16\x4b\xb2\x2c\x6b\x00\xb0\x69\x8a\x97\xb6\xa4\xe0\x28\x52\x3a\xc5\x61\x4d\x5b\x90\x6f\x5c\x19\xb2\xfa\x0e\x20\x7f\xd2\xc8\x55\xe9\x31\x68\x2e\xb0\xd5\x26\xfa\x50\x8c\xab\x8a\xe8\xef\xb8\x21\x25\x52\xf7\xc1\xb7\xcd\x16\xe6\x17\x65\x69\xdd\xe9\x0a\x23\xed\x7d\x30\xfd\xef\x75\xbf\xa9\xfb\x75\xa4\x45\x9a\x6e\x1a\x56\x5e\x53\xfa\x99\x9d\xf1\x20\x3b\x3e\xd3\xde\x70\x0c\xc9\xe0\x34\x67\x0d\xc7\x3f\xcf\xcf\x7f\x63\x38\xa6\x35\x8d\x6d\x03\xda\xa9\x61\xe9\x33\x1b\xb7\x6f\x2d\x86\xc9\xc4\x1d\x00\x2b\xdf\xd0\x16\xbe\x13\xe5\x1b\x54\x24\xdf\x5e\x73\xb8\x92\xf2\xeb\xce\x4b\xaf\x1f\xd1\x36\x15\x7e\xcc\xa2\x54\x45\x35\x66\xdb\x00\x7c\x43\xee\xe1\xfb\xc7\x1f\x7f\xf3\x74\xf4\x19\xa0\x09\xbe\xa1\x10\x07\x37\xe4\x31\xc1\xc3\xe4\x2b\x80\x26\x56\xc1\x34\x31\x01\xe5\x83\x08\xcc\xab\x40\x0b\x10\x88\x21\x56\xd4\xab\x46\xba\xd3\x01\xfc\x0e\x62\x65\x18\x02\x35\x81\x98\x5c\x1c\x7d\x35\x0e\xbf\x03\x74\xe0\xcb\xbf\x93\x8a\x05\x3c\x51\x10\x31\xc0\x95\x6f\xad\x06\xe5\xdd\x2b\x85\x08\x81\x94\xdf\x3b\xf3\xcf\x41\x36\x43\xf4\xe9\x50\x8b\x91\x3a\xdf\x8e\xc3\xb8\x48\xc1\xa1\x85\x57\xb4\x2d\xad\x00\x9d\x86\x1a\x0f\x10\x48\x4e\x81\xd6\x4d\xe4\xa5\x25\x5c\xc0\xb7\x3e\x10\x18\xb7\xf3\x5b\xa8\x62\x6c\x78\xbb\xd9\xec\x4d\xec\xf3\x40\xf9\xba\x6e\x9d\x89\x87\x8d\xf2\x2e\x06\x53\xb6\xd1\x07\xde\x68\x7a\x25\xbb\x61\xb3\x5f\x63\x50\x95\x89\xa4\x62\x1b\x68\x83\x8d\x59\x27\xd5\x5d\x4c\xc9\x54\xeb\x5f\x84\x2e\x73\xf8\xc3\x91\xae\xf1\x20\x11\xe6\x18\x8c\xdb\x4f\x26\x12\xcc\x2e\x44\x40\x60\x06\x86\x01\xbb\xad\xd9\x8a\xd1\xd1\xf2\x49\xbc\xf3\xf9\x4f\x4f\xcf\xd0\x1f\x9d\x82\x71\xea\xfd\xe4\xf7\x71\x23\x8f\x21\x10\x87\x19\xb7\xa3\x90\x83\xb8\x0b\xbe\x4e\x32\xc9\xe9\xc6\x1b\x17\xd3\x0f\x65\x0d\xb9\x53\xf7\x73\x5b\xd6\x26\x4a\xdc\xff\xd1\x12\x47\x89\x55\x01\x9f\xd0\x39\x1f\xa1\x24\x68\x1b\x8d\x91\x74\x01\x8f\x0e\x3e\x61\x4d\xf6\x13\x32\xfd\xe4\x01\x10\x4f\xf3\x5a\x1c\x7b\x5b\x08\xa6\xbc\x76\xba\x38\x7b\x6d\x32\xd1\xd3\xd0\x38\xe6\xf3\x4b\x46\x68\xed\xf9\x47\x00\x13\xa9\x9e\xf9\x7c\x49\x52\x1e\xae\xa7\x87\x85\xf9\x13\xec\x0c\x6c\x22\x49\x8b\xb1\xcb\xd0\xd6\x12\xd4\x18\x55\x25\xa9\xf0\x2c\x51\xae\x9b\x78\x38\xf7\xca\xf1\xb8\xbf\xef\x37\x81\xf3\x6e\x3d\x68\xa2\x07\xcc\x71\x01\x0f\xae\x13\x26\xfc\x08\xa6\x6e\xac\xa1\x53\x18\x8e\x83\x5e\x29\x1c\x46\x9b\x8a\x85\x85\x8b\xde\xca\x63\x21\xa6\xe7\x4b\x30\x04\x3c\xcc\xae\x10\xa7\x27\xbe\xba\xcd\xad\x7f\xe9\x97\x4b\x5a\x4a\x66\x0c\xfb\xa1\x24\x49\xc7\x86\xc2\xce\x87\x9a\xf4\xfb\x2c\xba\x7c\x98\x18\x23\x4c\x3a\xa4\xfa\xc9\xe9\x8b\x62\x01\x54\x45\xea\x85\x34\xec\x7c\x00\xd4\xb5\xe1\xc4\xeb\x29\xc9\xbc\xfd\x29\x1d\x3c\x40\xe4\x26\xff\xf6\x9d\xc7\x32\x6a\x8f\x70\xb6\xa8\x78\x87\x3f\x40\x6b\x13\xcb\x32\x18\x97\x7e\x3c\x7c\xff\x98\xbb\x08\x7e\x27\xe6\x8e\xd4\xfd\x5a\x24\x8d\x3a\x8f\xfc\x3a\x86\x68\x3c\xfd\xb4\x24\x4e\xc7\xa0\xd6\x92\x56\xd7\x09\x22\x8f\xdc\x21\x5d\x58\x30\x67\x41\x8f\x2f\xc9\xc7\x5c\xce\x69\xd4\x28\x47\x42\x90\x82\xc6\x2d\x67\x74\x1e\xb2\x73\x42\x0a\xa7\x14\x33\xf5\x50\xaa\x2b\x3e\xd0\x15\x89\x37\x78\x06\x6e\x43\x2a\x4c\xd0\xf8\xdd\xd8\x29\xde\xe4\xa6\xcf\xd3\x7d\xb9\x24\x27\x9e\x9b\x26\xa3\x71\x1c\xd1\xa9\x6b\x06\x25\xd2\xeb\xe1\x4d\xd0\x78\x6b\xd4\x61\xc4\xf7\x0f\x9c\xab\xba\xd4\x62\x69\x4f\x53\x79\x35\xe1\x02\x97\xe6\x31\xc9\x1c\x2f\xe5\x57\x6a\x95\xd9\x19\x29\xc0\xb3\xd4\x9c\x34\xb8\x22\x33\xb3\x74\x6f\x57\x8f\x8c\xd1\x60\xee\xd4\xd6\x97\x63\x73\x25\xa3\xf2\xb8\x31\x80\xd7\x09\x27\x8f\xab\xb4\x93\xc7\x02\xf9\xcc\x06\x98\xe1\xcd\xc4\xca\x38\x71\xc2\xcd\xa0\x85\xa7\xb6\x1c\x05\x60\xe8\x99\x4c\x43\x9b\x02\x8d\x70\xbf\xb9\x97\x90\x19\xa7\x8d\x5c\x5a\x6e\x48\x30\x1e\x45\x16\xf0\x95\x0f\x40\x5f\xb0\x6e\x2c\xad\xe0\xbe\xf1\x9a\x37\xd6\xef\xef\xe1\x2d\x75\xd6\xe9\xb0\x2b\x22\xbb\xfe\x6d\x68\xb5\xfd\x7e\x7a\x82\x78\x40\xa4\xe6\x64\x8e\xbe\x01\x2b\xcd\xd8\x55\x99\xdd\x6e\xed\x53\xd7\x10\xb3\x26\x53\xc1\xdc\xa9\x7b\x9f\xd6\xb8\x0f\xd7\xc0\x98\x05\x8c\x16\xfe\xdc\x30\xb7\xd0\x33\xde\x2e\xa6\x4b\x74\x3d\xa7\xf5\x7a\xd2\xa8\xcc\x4c\x5f\x3c\x7b\xe9\xd4\xf9\xf3\xd6\xb9\x73\xbd\xa9\x1d\x8e\x18\x5b\xbe\xb5\x21\x56\xde\x69\xb3\xd0\x69\x1d\xa5\xe1\xa7\x61\xa1\x5c\xca\xad\x21\xdd\x43\xb3\x43\xea\x0a\xb8\x55\x15\x60\x9a\x0f\xfe\x15\x2d\x74\xf7\xfa\x53\xa9\xce\xa0\x3d\xc7\xc9\xbb\x7b\x70\x8b\x1c\x9f\x03\x3a\x36\xfd\xf3\xc7\x4d\x4d\xcd\x37\x28\xd9\x65\x6a\xea\x6a\x5e\x67\x1e\xc4\x41\x94\x34\x66\x72\xf1\xf2\x8e\x3a\xaf\x2e\xc3\xcc\x03\x3a\x1f\x2b\x0a\x92\x91\x66\xb8\x43\x97\x04\x6f\x15\x25\x72\x82\xd6\x69\x0a\xf6\x20\xfc\x32\x9e\xa6\x2a\x74\x7b\x29\x07\xf0\xb8\x5b\x96\x2e\x65\xc9\xe4\x8c\x7d\x71\xfe\xcd\xad\x44\xa0\xeb\xc8\x2a\xf5\xa0\x62\xc7\x70\x92\x10\xdd\x6e\x78\x45\x99\x1b\xdd\xb1\x89\x52\x95\xa2\x26\x62\x69\x17\xfb\x7d\x69\x9d\x31\x6e\x41\x6e\x8e\x6b\x39\xe9\x62\x22\x5d\x48\xdc\x9a\x98\x71\x7f\x5b\x78\x1e\xa0\x6a\x6b\x74\x10\x08\xb5\x28\xd7\x6f\xee\x29\x59\x2c\xd7\x14\xd1\x58\x06\x2c\x7d\xbb\x4c\x54\xc9\x3f\x43\x50\xbb\xf8\xe4\x2a\x2e\xd7\xec\xb2\x6b\x86\x96\xac\xbf\x6a\x95\x2f\x59\x6e\xed\xfa\x6b\x72\x1d\x19\xdc\x64\xe0\xe3\x0e\x98\xe2\xea\xe4\x95\x26\x77\x60\x45\x7f\x01\x2e\xf6\x83\xd0\xcb\xe8\x38\xc6\xf0\x1b\xb2\x08\x87\x12\x59\x6a\x5a\x23\x66\x4b\x49\xea\x9b\x86\x15\x98\xdd\x7f\x77\x88\x61\x50\x6d\x08\xe4\xa2\x3d\xc0\xc7\x5f\xaf\xa0\x6c\xf3\xa1\x45\xce\x8c\x62\x38\xfc\xaf\x5f\xfe\x56\x9c\xbb\xe4\x92\xe0\x3f\xac\x4e\xd4\x37\x0c\xbe\x4d\x55\x5e\x20\x97\x0a\xbc\xd4\xae\x86\xd4\x50\x0f\x3b\x65\x16\xc5\x8a\x56\x43\x6f\xd4\x9b\x7d\x0d\xe0\xc6\xc5\xdf\xfd\xf6\x22\x0c\x8c\x8b\xb4\xa7\x39\x5a\x13\xe6\x46\xbe\x31\xf6\xcf\x89\x36\x65\x79\xba\xfa\x1d\x59\xff\x81\x13\xa3\x4d\x20\xbb\xec\xbb\xa3\x37\x1c\x11\xda\xf5\x97\x2a\x51\x80\xa0\x5b\x55\xde\x73\xa2\x06\x21\x27\xf0\x21\x91\xc8\xcc\x63\xd4\xc4\x1b\x29\x35\x24\xe0\xde\xb1\xd1\x14\x48\x03\xc2\xbe\xc5\x80\x2e\x12\x69\x91\x7d\x96\x45\xf9\x79\x69\xf9\x65\xe1\x7f\xca\xb0\xb9\x92\xb6\xe0\xd9\xa7\xb4\xb4\x0f\xfc\xe0\xd4\x55\x22\x71\xbf\x83\xe7\xd0\xd2\x0a\xbe\x42\xcb\xb4\x82\x1f\x5c\x62\xd3\x77\xeb\x95\x16\xdc\x14\xef\xee\x89\x60\x02\xf1\x49\xe8\x20\x65\x26\xec\xbc\x2f\xba\x9e\xb1\x50\xbe\xde\x8c\xa1\x5d\x74\xeb\xb7\xe8\x0e\x30\xa6\x5e\x91\x9e\x22\xf2\xa3\x6a\xea\x6a\x53\x04\x39\x92\x8b\x80\x2a\x78\x1e\x6f\xc0\xcb\xe1\xb7\xe6\x85\xe0\xe1\x15\x8d\x15\xda\xcd\x89\x5e\x92\xc2\x96\x09\x30\x94\x26\x06\x0c\x87\x49\xdf\x00\x0a\x5d\x7a\x59\x64\xda\xb5\xcb\x1d\xe8\x2f\x99\x08\x0a\xe7\x35\x9d\x31\x06\xff\x2a\x13\x00\x96\xc6\x9a\x78\x90\x14\xd7\xa4\xbc\xdb\x59\xa3\xa4\xee\x5d\x7a\x4f\xf0\x21\xa2\x8b\xef\x8c\xe0\xe5\xde\xee\xbc\xaf\x98\x5d\xd6\xd5\xa5\xd9\xb9\x9c\xe3\xb3\x53\x8b\x0d\xc5\x3a\x69\xfd\xff\x6a\x27\x6f\x2b\x4f\x47\x60\x3d\xdf\xd0\xbf\x44\xd4\x9e\xd3\xdf\x01\x82\xa7\xb1\x66\x0c\x1b\x66\x74\xce\xec\x66\x46\xdc\x15\xf0\x18\x41\xf9\x20\x74\xee\x9d\xe6\xb1\x89\xcc\xf3\x1f\x78\x22\x79\x35\x23\xf1\xad\x32\xaa\x12\x85\xba\x97\x6c\xf0\x0e\xea\x36\x76\xef\x6d\x87\xa1\xff\xc9\x2f\xe9\xe7\xc0\xb8\xcc\xf5\x97\x58\xbe\xa9\x90\x67\xd2\xfd\x02\xc6\x96\x2a\xc2\xe2\x96\xd9\x10\x9f\x7d\xcc\xde\xde\x42\x0c\x6d\xc6\x09\x47\x1f\xa4\xaf\x9a\x7c\x99\xdc\xe8\xfa\xf3\x3b\x16\x85\x7f\xfd\xfb\xee\x3f\x01\x00\x00\xff\xff\x90\x4c\x14\xd7\x7b\x1c\x00\x00")

func auditorKubeshieldTo_dashboardsV1YamlBytes() ([]byte, error) {
	return bindataRead(
		_auditorKubeshieldTo_dashboardsV1Yaml,
		"auditor.kubeshield.to_dashboards.v1.yaml",
	)
}

func auditorKubeshieldTo_dashboardsV1Yaml() (*asset, error) {
	bytes, err := auditorKubeshieldTo_dashboardsV1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "auditor.kubeshield.to_dashboards.v1.yaml", size: 7291, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _auditorKubeshieldTo_dashboardsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdd\x6f\x23\xb7\x11\x7f\xf7\x5f\x31\x70\x0b\x5c\x52\x48\xab\xba\x29\x82\x46\x2f\x85\xe1\xf6\x02\xa3\x97\xf4\x70\x76\xf2\x72\xb8\x02\xb3\xcb\x91\x96\x35\x97\xdc\x72\xb8\xf2\xe9\x8a\xfe\xef\xc5\x90\xfb\x25\x69\x57\x56\x5c\x04\x28\x9f\xb4\xfc\x98\xef\xf9\xcd\x90\xc2\x5a\xff\x4c\x9e\xb5\xb3\x6b\xc0\x5a\xd3\xe7\x40\x56\xbe\x38\x7b\xfa\x13\x67\xda\xad\x76\x37\x39\x05\xbc\xb9\x7a\xd2\x56\xad\xe1\xae\xe1\xe0\xaa\x0f\xc4\xae\xf1\x05\xfd\x85\x36\xda\xea\xa0\x9d\xbd\xaa\x28\xa0\xc2\x80\xeb\x2b\x80\xc2\x13\xca\xe4\xa3\xae\x88\x03\x56\xf5\x1a\x6c\x63\xcc\x15\x80\xc1\x9c\x0c\xcb\x1e\x00\xac\xeb\xec\xa9\xc9\xc9\x5b\x0a\x14\x59\x59\xac\x68\x0d\x32\xc7\xa5\x26\xa3\xae\x00\xd2\x94\x42\x2e\x73\x87\x5e\x71\x86\x8d\xd2\xc1\xf9\x6c\xd8\x95\x05\x77\xc5\x35\x15\x42\x75\xeb\x5d\x53\xaf\x61\x7a\x53\xa2\xd6\x72\x2f\x30\xd0\xd6\x79\xdd\x7d\x2f\xbb\x43\xed\xd7\x81\x14\x71\xb9\xae\xb9\x70\x8a\xe2\x67\x32\xc6\xad\x9c\xf8\x40\x5b\xcd\xc1\x47\x85\xe3\x9a\xd1\x1c\xfe\x36\xbd\xfe\x4e\x73\x88\x7b\x6a\xd3\x78\x34\x63\xc5\xe2\x34\x6b\xbb\x6d\x0c\xfa\xd1\xc2\x15\x40\xed\x89\xc9\xef\xe8\x27\xfb\x64\xdd\xb3\x7d\x2b\x42\xf1\x1a\x36\x68\x58\xa4\xe1\xc2\xd5\xb4\x86\x1f\x45\xb7\x1a\x0b\x92\x23\xdc\xe4\xbe\xf5\x51\xab\x1f\x07\x0c\x0d\xaf\xe1\xdf\xff\xb9\x02\xd8\xa1\xd1\x2a\x4a\x94\x16\x5d\x4d\xf6\xf6\xfd\xfd\xcf\xdf\x3c\x14\x25\x55\x98\x26\x85\xb1\xab\xc9\x87\xde\x46\xc9\x6b\x7d\xbc\xf4\x73\x00\x8a\xb8\xf0\xba\x8e\x14\xe1\x8d\x90\x4a\x7b\x40\x49\x84\x10\x43\x28\x09\x76\x69\x8e\x14\x70\x64\x03\x6e\x03\xa1\xd4\x0c\x9e\xa2\x8a\x36\x0c\x46\xec\x86\xdb\x00\x5a\x70\xf9\x3f\xa9\x08\x19\x3c\x88\x19\x3c\x03\x97\xae\x31\x0a\x0a\x67\x77\xe4\x03\x78\x2a\xdc\xd6\xea\x2f\x3d\x65\x86\xe0\x22\x4b\x83\x81\x5a\x93\x77\x43\xdb\x40\xde\xa2\x11\x23\x34\xb4\x00\xb4\x0a\x2a\xdc\x83\x27\xe1\x01\x8d\x1d\x51\x8b\x5b\x38\x83\x1f\x9c\x27\xd0\x76\xe3\xd6\x50\x86\x50\xf3\x7a\xb5\xda\xea\xd0\x65\x48\xe1\xaa\xaa\xb1\x3a\xec\x57\x85\xb3\xc1\xeb\xbc\x09\xce\xf3\x4a\xd1\x8e\xcc\x8a\xf5\x76\x89\xbe\x28\x75\xa0\x22\x34\x9e\x56\x58\xeb\x65\x14\xdc\x86\x98\x66\x95\xfa\x4d\xef\xaa\x37\x23\x49\xc3\x5e\xbc\xca\xc1\x6b\xbb\xed\xa7\x63\xdc\xcd\xda\x5d\xa2\x0e\x34\x03\xb6\xc7\x92\xfc\x83\x79\x65\x4a\xac\xf2\xe1\xaf\x0f\x8f\xd0\x31\x8d\x2e\x38\xb4\x79\xb4\xf6\x70\x8c\x07\xc3\x8b\xa1\xb4\xdd\x90\x4f\x8e\xdb\x78\x57\x45\x8a\x64\x55\xed\xb4\x0d\xf1\xa3\x30\x9a\xec\xa1\xd1\xb9\xc9\x2b\x1d\xc4\xd3\xff\x6a\x88\x83\xf8\x27\x83\x3b\xb4\xd6\x05\xc8\x09\x9a\x5a\x61\x20\x95\xc1\xbd\x85\x3b\xac\xc8\xdc\x21\xd3\xaf\x6e\x76\xb1\x30\x2f\xc5\xa4\x2f\x1b\x7e\x0c\x6f\xdd\x98\x4a\x0f\x19\x11\xb3\x0e\x66\x00\x2a\xfc\xfc\x8e\xec\x36\x94\x6b\xf8\xf6\x9b\xa3\xb5\x1a\x83\x84\xe4\x1a\xfe\xf1\x11\x97\x5f\x3e\x7d\xf5\x71\x89\xcb\x2f\xbf\x5f\x7e\xf7\xe9\x77\x1f\xdb\x1f\x5f\xff\xf9\xb7\x47\x67\x26\x85\xec\xa6\x93\x03\xfb\xe9\x0e\x1c\x5f\x92\xdb\x37\xe6\x78\x0a\x40\x07\xaa\x4e\x26\xe7\x69\x0c\x16\x88\x58\x34\xb9\x7a\x14\xb6\x3d\x70\x09\x4a\x60\x68\x21\xa1\x31\x04\x15\x86\xa2\x94\xfc\x7b\x94\x10\xab\xea\xb0\x3f\xd5\x78\x3c\xae\xaf\xbb\x23\x60\x9d\x5d\xf6\x52\xa8\x3e\xd8\x39\x83\x5b\xdb\x92\x12\x9c\x06\x5d\xd5\x46\x13\x03\xed\xc8\xef\x67\xc8\xf6\x74\xb2\xc9\x0d\x33\x16\x4a\x63\xc6\x4f\xc7\x1b\xd0\x7b\x9c\x62\x2f\x46\x8e\xa0\x78\x89\x21\xff\xde\x6d\x16\x0c\x90\x44\xec\x4f\x43\x4e\x92\xfb\x35\xf9\x8d\xf3\x15\xa9\x5f\xae\xc7\x79\x46\xa2\x84\x40\x75\x8f\x29\x47\x9c\x67\x88\x02\x14\x25\x15\x4f\xa4\x60\xe3\x3c\xa0\xaa\x34\xc7\xa2\x11\xf3\xd9\x99\x5f\xc7\xa4\x47\x75\xf1\xac\xa2\x5d\x9f\x33\x1f\x99\x93\xd1\x34\x23\x38\x1a\x13\x01\x9c\x41\xdb\xf8\x71\xfb\xfe\x3e\x75\x2c\xfc\x8a\xc8\x3a\x10\xf4\x7b\xa1\x32\x48\x3b\x40\xf7\xe0\x92\x81\xb3\x9d\x75\x47\x2f\xd0\xb4\x3c\x2f\xa5\x7d\x1a\xa9\x07\x9b\x5d\x9e\x92\xbc\x8b\x23\xc9\xb4\xd4\x15\xd0\x20\x4b\xb2\xbd\xc4\x04\x6a\x3b\x67\xdb\x34\xe4\xdc\x28\xd5\x8f\x61\x63\x6c\x97\x58\xa8\xa4\xbe\xdc\xbe\xbf\x3f\x4b\xf3\xac\x3d\xe0\x92\x78\x84\x51\xd4\xfd\x38\x74\xa0\x17\x18\xe7\xc3\xf8\x54\xaa\xec\x31\xce\xc6\xa9\xa6\x2d\x07\xb4\x05\x9d\x55\x22\x42\x58\x17\xc4\x04\xb5\x33\xba\xd8\x0f\x51\xfc\x13\xa7\xd6\x40\x4a\xba\x74\x97\xb1\x4e\x6b\x3f\x1b\xc9\x69\x8c\xb2\xc3\x49\x15\x97\x3a\xa3\x37\x5a\xea\xf8\x34\xc8\x0a\xff\xb3\x14\x23\x0a\xf7\x1a\x75\x91\x30\xa8\xca\xad\xc8\xea\x9c\x3f\xce\x66\x4d\x1a\x17\xb9\xec\x25\x20\x49\xe3\x05\x38\x49\x63\x06\x54\x26\x1d\xca\xf0\xac\x43\xa9\xad\xa8\x7e\x56\x89\x21\x59\xe1\x61\xd4\xee\x03\xfa\x0e\x9f\x14\x34\xd1\xb1\x08\xd7\xab\x6b\x71\x92\xb6\x4a\xcb\xc5\xe7\xc5\x24\x1a\xdd\x1f\x32\x78\xeb\x3c\xd0\x67\xac\x6a\x43\x0b\xb8\xae\x9d\xe2\x95\x71\xdb\x6b\x78\x8e\x4d\x78\x64\xd5\x35\x76\xe7\x09\xb7\x3d\xb9\xdb\x8e\xe9\x8b\xee\x42\x33\xa5\x6b\x70\x35\x18\xe9\xe0\x7a\x7b\x9c\x25\xa9\x5c\xac\xf5\xa1\x95\x62\x7c\xed\x69\x45\xbd\x8e\x7b\xec\x9b\x6e\xcb\x20\xff\xff\x4b\x0c\x4d\xf6\x6c\x97\x92\x68\x13\x55\x9d\xca\xba\x1c\x35\x0f\x27\x8b\x67\x78\x4e\x73\x9b\xe2\xb3\x4c\x1d\xe3\x8b\xed\x67\xba\x79\x5e\xd0\x80\x16\xce\x2a\x3d\xd9\xed\x1c\x24\xd0\x5d\xbf\x4d\x2e\xe5\x46\x93\xea\x42\xab\x8d\xc2\x05\x70\x53\x94\x80\x71\xdd\xbb\x1d\x1a\x68\xef\xf5\x87\x34\xad\x46\x73\x1c\x05\xaf\xea\x77\x0d\x72\x78\xf4\x68\x59\x77\xcf\x1e\x17\x34\x17\xef\x90\x03\x04\x5d\x51\x5b\x8b\x5a\xa5\x20\xf4\x84\xa4\x31\x92\x1b\x96\xb3\xd4\x5a\x71\x2e\x84\x1c\xa0\x75\xa1\x24\x2f\x59\xa4\xfb\x0b\x72\x4e\xf0\x5c\x52\x84\x12\x68\xac\x22\x6f\xf6\x82\x07\x03\xaf\xa2\x44\xbb\x15\xc0\x86\xfb\xcd\x1c\x6d\x29\x1a\x3a\x65\x59\x7c\x7f\x58\x08\x39\xdb\x42\x4b\xec\xfe\x44\x87\x9e\x8f\xc0\x52\x2a\x22\x2d\xf1\x19\xba\x02\x7e\x45\x41\x75\xc0\xdc\xcc\x74\xd6\xd2\xac\x62\x58\x83\x5c\x0e\x97\xc2\xe5\x4c\x7a\xcc\x26\x62\x45\xcc\xb8\xbd\xc4\x21\xb7\x50\x36\x15\x5a\xf0\x84\x4a\x84\xea\x8e\x76\xb0\x29\xfa\x2a\x0a\xa8\x0d\x03\xe6\xae\x99\x43\xbb\x68\x93\xde\x89\xad\x47\x92\x49\xe4\xfe\x9c\xb7\x4d\xc9\xb4\xce\x2f\x68\xe3\xf2\xf8\x14\xa4\xbe\x27\xdb\x26\xf7\x05\x8a\xdd\x6f\x80\x29\x2c\x8e\x1e\x5b\x52\x0f\x94\x75\x37\xdb\x6c\xdb\x93\x3c\x17\x09\x87\xb1\xfa\x8c\x2c\xa4\x21\x47\x96\x6a\x53\x8b\xba\x52\x2e\xba\x12\xbe\x00\xbd\xf9\x25\x2c\x34\x43\xd1\x78\x4f\x36\x98\x3d\xdc\xfc\x61\x01\x79\x93\x58\x66\x29\xfe\xb3\x9e\xf5\xc7\xcf\x9f\xb2\x53\x63\xcc\x93\xfd\x6e\x71\x24\xba\x66\x70\x4d\xac\xbc\x12\x5e\xb1\xe8\x4a\xcd\xa9\xa9\x08\x1d\x9c\xb4\xa2\xcc\x10\x15\x89\xfa\x1e\xa5\x53\xf8\x7c\x20\x6b\x1b\xbe\xfd\xe3\x19\xb7\x6b\x1b\x68\x4b\xa7\x50\x25\xf8\x8b\x7c\x91\xaf\x1f\x23\x0c\xca\xe6\x78\xa9\x3a\xd0\xf9\x0d\x47\xa4\x1a\x05\x27\xe8\x39\x93\x8d\x9e\x61\x84\x64\xdb\xdb\x15\x31\xbd\x25\x8a\x8b\xd2\x39\x8e\x69\x2f\xb0\x03\xce\x47\x80\x18\x5a\xc8\x33\x0e\x76\x96\xb5\x22\x4f\x0a\x10\xb6\x0d\x7a\xb4\x81\x48\x09\xe5\x93\x5c\x69\xdf\x87\x5e\x9f\x2f\xa7\xc5\x67\xc6\x6e\x0f\x71\x63\xe7\xce\xde\x64\x8b\x08\xbe\x6e\x03\x8f\xbe\xa1\x05\xbc\x45\xc3\xb4\x80\xf6\x25\xf6\x55\x12\xc5\xe5\x0b\xfc\xd8\x5e\xa9\x47\x01\x3b\x7a\x1b\x83\x98\x63\xb0\x71\x2e\x6b\x3b\xb3\xac\x70\xd5\x6a\x70\xda\x8c\xf9\x7f\x40\xbb\x87\x21\x89\xb2\x78\x71\x4f\xaf\x9c\xb1\x6f\x8c\xbe\xe1\x40\x36\x00\x16\xde\xf1\x70\x7f\x9c\x2b\x3d\x46\x3f\x11\xdc\xee\x50\x1b\x81\xcc\x94\xb0\x39\x15\xd8\x30\x01\xfa\x5c\x07\x8f\x7e\x3f\xaa\xec\x50\xa0\x8d\x4f\x7e\x4c\x9b\x66\xee\x8a\xff\x15\x13\x41\x66\x9d\xa2\x93\xbc\xe7\xaf\x53\x22\x63\xae\x8d\x0e\x7b\x49\x55\x45\x85\xb3\x1b\xa3\x0b\xa9\x53\x73\x71\x57\xd5\xce\x07\xb4\xe1\x15\x3e\x3b\xd7\x63\x9d\x56\xfe\x89\x4d\x6d\x1d\x99\x58\x49\x99\x3a\xb1\x30\x53\xee\x97\x51\xd2\xff\xbd\x9d\xbb\xa4\x90\x1c\x84\xe3\xe9\xf6\xee\xce\x5e\x39\x8e\x2f\xf0\x12\x33\x03\xbe\xf7\x07\x4e\x64\x4d\xa8\xa4\x87\xc8\xca\xe0\x5e\xae\xf7\x5e\xc0\xd7\x59\xc5\x43\x33\x97\xd6\xdf\xf0\x88\xee\x02\x9e\x4b\x5d\x94\x27\x54\x35\x77\x8f\xc8\xe0\x2c\x54\x4d\x68\x5f\x9f\xf6\x7d\x4f\x92\x9e\xb0\x8f\xdd\x7f\x0e\x99\xe7\x31\xb9\x2e\x91\x4f\x92\x78\x36\x86\xa6\xb1\xfb\xf2\x17\xdc\xa3\xa9\x5d\xf7\x77\xdd\xee\x06\x4d\x5d\xe2\xcd\x30\x17\x81\x6e\xd9\xfe\x69\x36\x5a\x06\x48\xce\x58\x43\xf0\x4d\x0a\x1f\x0e\xce\x4b\x5b\x94\x66\xfe\x1b\x00\x00\xff\xff\xbf\x9e\x17\x08\x06\x1c\x00\x00")

func auditorKubeshieldTo_dashboardsYamlBytes() ([]byte, error) {
	return bindataRead(
		_auditorKubeshieldTo_dashboardsYaml,
		"auditor.kubeshield.to_dashboards.yaml",
	)
}

func auditorKubeshieldTo_dashboardsYaml() (*asset, error) {
	bytes, err := auditorKubeshieldTo_dashboardsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "auditor.kubeshield.to_dashboards.yaml", size: 7174, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"auditor.kubeshield.to_dashboards.v1.yaml": auditorKubeshieldTo_dashboardsV1Yaml,
	"auditor.kubeshield.to_dashboards.yaml":    auditorKubeshieldTo_dashboardsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"auditor.kubeshield.to_dashboards.v1.yaml": &bintree{auditorKubeshieldTo_dashboardsV1Yaml, map[string]*bintree{}},
	"auditor.kubeshield.to_dashboards.yaml":    &bintree{auditorKubeshieldTo_dashboardsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
